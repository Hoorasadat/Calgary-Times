{"ast":null,"code":"var _jsxFileName = \"/Users/hoora/Desktop/f9948f/src/components/BlogList.jsx\";\nimport BlogPost from \"./BlogPost\";\nimport Pagination from \"./Pagination\";\nimport React, { useState } from \"react\";\nimport blogs from \"../data/blogs.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PAGE_SIZES = [15, 25, 50, 100];\nconst siblingCount = 1;\n\nfunction BlogList() {\n  const [currentPage, setCurrentPage] = setState(1);\n  const [currentPaginationData, setCurrentPaginationData] = setState(blogs.posts.slice(0, 15));\n  const [lastPageNumber, setLastPageNumber] = setState(Math.ceil(blogs.posts.length / 15));\n  const [pageSize, setPageSize] = setState(15);\n\n  const updatePage = (page, size) => {\n    const indexOfLastRecord = page * size;\n    const indexOfFirstRecord = indexOfLastRecord - size;\n    setCurrentPaginationData(blogs.posts.slice(indexOfFirstRecord, indexOfLastRecord));\n  };\n\n  const updateRowsPerPage = size => {\n    setCurrentPage(1);\n    setLastPageNumber(Math.ceil(blogs.posts.length / size));\n    setPageSize(size);\n    updatePage(1, size);\n  };\n\n  const updatePageNumber = action => {\n    const page = action === 'increment' ? currentPage < lastPage ? currentPage + 1 : lastPage : currentPage > 1 ? currentPage - 1 : 1;\n    setCurrentPage(page);\n    updatePage(page, size);\n  };\n\n  const updateCurrentPage = page => {\n    const size = this.state.pageSize;\n    this.setState({\n      currentPage: page\n    });\n    this.updatePage(page, size);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: this.state.currentPage,\n      lastPage: this.state.lastPageNumber,\n      onPageMove: this.updateCurrentPage,\n      onPageNumberChange: this.updatePageNumber,\n      onPageSizeOptionChange: this.updateRowsPerPage,\n      pageSize: parseInt(this.state.pageSize),\n      pageSizeOptions: PAGE_SIZES,\n      siblingCount: siblingCount // totalCount={blogs.posts.length}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      // Do not modify the aria-label below, it is used for Hatchways automation.\n      \"aria-label\": \"blog list\",\n      children: this.state.currentPaginationData.map(blog => /*#__PURE__*/_jsxDEV(BlogPost, {\n        author: blog.author,\n        title: blog.title,\n        excerpt: blog.excerpt,\n        featureImage: blog.image\n      }, blog.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_c = BlogList;\nexport default BlogList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlogList\");","map":{"version":3,"names":["BlogPost","Pagination","React","useState","blogs","PAGE_SIZES","siblingCount","BlogList","currentPage","setCurrentPage","setState","currentPaginationData","setCurrentPaginationData","posts","slice","lastPageNumber","setLastPageNumber","Math","ceil","length","pageSize","setPageSize","updatePage","page","size","indexOfLastRecord","indexOfFirstRecord","updateRowsPerPage","updatePageNumber","action","lastPage","updateCurrentPage","state","parseInt","map","blog","author","title","excerpt","image","id"],"sources":["/Users/hoora/Desktop/f9948f/src/components/BlogList.jsx"],"sourcesContent":["import BlogPost from \"./BlogPost\";\nimport Pagination from \"./Pagination\";\nimport React, { useState } from \"react\";\nimport blogs from \"../data/blogs.json\";\n\nconst PAGE_SIZES = [15, 25, 50, 100];\nconst siblingCount = 1;\n\nfunction BlogList() {\n  const [currentPage, setCurrentPage] = setState(1);\n  const [currentPaginationData, setCurrentPaginationData] = setState(blogs.posts.slice(0, 15));\n  const [lastPageNumber, setLastPageNumber] = setState(Math.ceil(blogs.posts.length / 15));\n  const [pageSize, setPageSize] = setState(15);\n\n  const updatePage = (page, size) => {\n    const indexOfLastRecord = page * size;\n    const indexOfFirstRecord = indexOfLastRecord - size;\n    setCurrentPaginationData(blogs.posts.slice(indexOfFirstRecord, indexOfLastRecord));\n  };\n\n  const updateRowsPerPage = (size) => {\n    setCurrentPage(1);\n    setLastPageNumber(Math.ceil(blogs.posts.length / size));\n    setPageSize(size);\n    updatePage(1, size);\n  };\n\n  const updatePageNumber = (action) => {\n    const page = action === 'increment' ?\n      (currentPage < lastPage ?\n        currentPage + 1:\n        lastPage) :\n      (currentPage > 1 ?\n      currentPage - 1:\n      1);\n    setCurrentPage(page);\n    updatePage(page, size);\n  };\n\n  const updateCurrentPage = (page) => {\n    const size = this.state.pageSize;\n    this.setState({currentPage: page});\n    this.updatePage(page, size);\n  };\n\n  return (\n    <div>\n      <Pagination\n        currentPage={this.state.currentPage}\n        lastPage={this.state.lastPageNumber}\n        onPageMove={this.updateCurrentPage}\n        onPageNumberChange={this.updatePageNumber}\n        onPageSizeOptionChange={this.updateRowsPerPage}\n        pageSize={parseInt(this.state.pageSize)}\n        pageSizeOptions={PAGE_SIZES}\n        siblingCount={siblingCount}\n        // totalCount={blogs.posts.length}\n      />\n      <ul\n        // Do not modify the aria-label below, it is used for Hatchways automation.\n        aria-label=\"blog list\"\n        >\n        {this.state.currentPaginationData.map((blog) => (\n          <BlogPost\n            key={blog.id}\n            author={blog.author}\n            title={blog.title}\n            excerpt={blog.excerpt}\n            featureImage={blog.image}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default BlogList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}