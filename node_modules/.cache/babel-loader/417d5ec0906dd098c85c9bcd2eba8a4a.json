{"ast":null,"code":"var _jsxFileName = \"/Users/hoora/Desktop/f9948f/src/components/Pagination.jsx\",\n    _s = $RefreshSig$();\n\nimport \"../css/pagination.scss\";\nimport { ChevronLeftIcon, ChevronRightIcon } from \"@heroicons/react/outline\";\nimport usePagination, { DOTS } from \"../hooks/usePagination\";\nimport PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Pagination(_ref) {\n  _s();\n\n  let {\n    onPageNumberChange,\n    onPageSizeOptionChange,\n    // pageSize,\n    pageSizeOptions,\n    totalCount\n  } = _ref;\n  const [currentPage, setCurrentPage] = useState(1);\n  const [lastPage, setLastPage] = useState(Math.ceil(totalCount / 15));\n  const [pageSize, setPageSize] = useState(15);\n  const paginationRange = usePagination(currentPage, pageSize, totalCount);\n\n  const onNext = () => {\n    setCurrentPage(currentPage + 1);\n    onPageNumberChange(currentPage, pageSize);\n  };\n\n  const onPrevious = () => {\n    setCurrentPage(currentPage - 1);\n    onPageNumberChange(currentPage, pageSize);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"wrapper\" // Do not modify the aria-label below, it is used for Hatchways automation.\n    ,\n    \"aria-label\": \"Blog post pagination list\",\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"paginationItem\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"arrowButton left\" // Do not modify the aria-label below, it is used for Hatchways automation.\n        ,\n        \"aria-label\": \"Goto previous page\",\n        onClick: onPrevious,\n        disabled: currentPage === 1 // change this line to disable a button.\n        ,\n        children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), paginationRange.map(pageNumber => {\n      const key = nanoid();\n\n      if (pageNumber === DOTS) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"dots\",\n          children: \"\\u2026\"\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"paginationItem\",\n        \"aria-current\": pageNumber === currentPage ? \"page\" : \"false\" // change this line to highlight a current page.\n        ,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\" // Do not modify the aria-label below, it is used for Hatchways automation.\n          ,\n          \"aria-label\": `Goto page ${pageNumber}`,\n          onClick: e => {\n            setCurrentPage(parseInt(e.target.innerText));\n            onPageNumberChange(currentPage, pageSize);\n          },\n          children: pageNumber\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"paginationItem\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"arrowButton right\" // Do not modify the aria-label below, it is used for Hatchways automation.\n        ,\n        \"aria-label\": \"Goto next page\",\n        onClick: onNext,\n        disabled: currentPage === lastPage // change this line to disable a button.\n        ,\n        children: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"paginationSelector\" // Do not modify the aria-label below, it is used for Hatchways automation.\n      ,\n      \"aria-label\": \"Select page size\" // value={pageSize}\n      ,\n      onChange: e => {\n        setPageSize(parseInt(e.target.value));\n        setLastPage(Math.ceil(totalCount / pageSize));\n        onPageSizeOptionChange(pageSize);\n      },\n      children: pageSizeOptions.map(size => /*#__PURE__*/_jsxDEV(\"option\", {\n        defaultValue: pageSize === size,\n        value: size,\n        children: [size, \" per page\"]\n      }, size, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Pagination, \"DXltKIwglZ7ytZCQKLP5sF0dtEQ=\", false, function () {\n  return [usePagination];\n});\n\n_c = Pagination;\nPagination.propTypes = {\n  onPageNumberChange: PropTypes.func,\n  onPageSizeOptionChange: PropTypes.func,\n  pageSize: PropTypes.number,\n  pageSizeOptions: PropTypes.instanceOf(Array),\n  totalCount: PropTypes.number\n};\nPagination.defaultProps = {\n  onPageNumberChange: () => {},\n  onPageSizeOptionChange: () => {},\n  // pageSize: 15,\n  pageSizeOptions: [15, 25, 50, 100],\n  totalCount: 1\n};\nexport default Pagination;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"names":["ChevronLeftIcon","ChevronRightIcon","usePagination","DOTS","PropTypes","React","useState","nanoid","Pagination","onPageNumberChange","onPageSizeOptionChange","pageSizeOptions","totalCount","currentPage","setCurrentPage","lastPage","setLastPage","Math","ceil","pageSize","setPageSize","paginationRange","onNext","onPrevious","map","pageNumber","key","e","parseInt","target","innerText","value","size","propTypes","func","number","instanceOf","Array","defaultProps"],"sources":["/Users/hoora/Desktop/f9948f/src/components/Pagination.jsx"],"sourcesContent":["import \"../css/pagination.scss\";\n\nimport { ChevronLeftIcon, ChevronRightIcon } from \"@heroicons/react/outline\";\nimport usePagination, { DOTS } from \"../hooks/usePagination\";\n\nimport PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nfunction Pagination({\n  onPageNumberChange,\n  onPageSizeOptionChange,\n  // pageSize,\n  pageSizeOptions,\n  totalCount\n}) {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [lastPage, setLastPage] = useState(Math.ceil(totalCount / 15));\n  const [pageSize, setPageSize] = useState(15);\n\n  const paginationRange = usePagination(\n    currentPage,\n    pageSize,\n    totalCount,\n  );\n\n  const onNext = () => {\n    setCurrentPage(currentPage + 1);\n    onPageNumberChange(currentPage, pageSize);\n  };\n\n  const onPrevious = () => {\n    setCurrentPage(currentPage - 1);\n    onPageNumberChange(currentPage, pageSize);\n  };\n\n  return (\n    <ul\n      className=\"wrapper\"\n      // Do not modify the aria-label below, it is used for Hatchways automation.\n      aria-label=\"Blog post pagination list\"\n    >\n      <li className=\"paginationItem\">\n        <button\n          type=\"button\"\n          className=\"arrowButton left\"\n          // Do not modify the aria-label below, it is used for Hatchways automation.\n          aria-label=\"Goto previous page\"\n          onClick={onPrevious}\n          disabled={currentPage === 1} // change this line to disable a button.\n        >\n          <ChevronLeftIcon />\n        </button>\n      </li>\n\n      {paginationRange.map((pageNumber) => {\n        const key = nanoid();\n\n        if (pageNumber === DOTS) {\n          return (\n            <li key={key} className=\"dots\">\n              &#8230;\n            </li>\n          );\n        }\n\n        return (\n          <li\n            key={key}\n            className=\"paginationItem\"\n            aria-current={pageNumber===currentPage\n              ? \"page\" : \"false\"} // change this line to highlight a current page.\n          >\n            <button\n              type=\"button\"\n              // Do not modify the aria-label below, it is used for Hatchways automation.\n              aria-label={`Goto page ${pageNumber}`}\n              onClick={(e) => {\n                setCurrentPage(parseInt(e.target.innerText));\n                onPageNumberChange(currentPage, pageSize);\n              }}\n            >\n              {pageNumber}\n            </button>\n          </li>\n        );\n      })}\n\n      <li className=\"paginationItem\">\n        <button\n          type=\"button\"\n          className=\"arrowButton right\"\n          // Do not modify the aria-label below, it is used for Hatchways automation.\n          aria-label=\"Goto next page\"\n          onClick={onNext}\n          disabled={currentPage === lastPage} // change this line to disable a button.\n        >\n          <ChevronRightIcon />\n        </button>\n      </li>\n\n      <select\n        className=\"paginationSelector\"\n        // Do not modify the aria-label below, it is used for Hatchways automation.\n        aria-label=\"Select page size\"\n        // value={pageSize}\n        onChange={(e) => {\n          setPageSize(parseInt(e.target.value))\n          setLastPage(Math.ceil(totalCount / pageSize));\n          onPageSizeOptionChange(pageSize);\n        }}\n      >\n        {pageSizeOptions.map((size) => (\n          <option key={size} defaultValue={pageSize === size} value={size}>\n            {size} per page\n          </option>\n        ))}\n      </select>\n    </ul>\n  );\n}\n\nPagination.propTypes = {\n  onPageNumberChange: PropTypes.func,\n  onPageSizeOptionChange: PropTypes.func,\n  pageSize: PropTypes.number,\n  pageSizeOptions: PropTypes.instanceOf(Array),\n  totalCount: PropTypes.number,\n};\n\nPagination.defaultProps = {\n  onPageNumberChange: () => {},\n  onPageSizeOptionChange: () => {},\n  // pageSize: 15,\n  pageSizeOptions: [15, 25, 50, 100],\n  totalCount: 1,\n};\n\nexport default Pagination;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}